name: CI

on:
  push:
    branches:
    - main
  pull_request:

jobs:
  validate:
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v3
    - name: Validate version files
      # Make sure we still know how to edit the version files. (But discard the changes.)
      run: .github/set-versions.sh -n 0.0.1

  java-test:
    strategy:
      matrix:
        target: [ubuntu-22.04, macos-11]
        include:
        - target: ubuntu-22.04
          host: ubuntu-22.04
        - target: macos-11
          host: macos-11
    runs-on: ${{ matrix.host }}
    container: ${{ matrix.image }}
    env:
      COURSIER_CACHE: /tmp/.cache/coursier/v1
    steps:
    - uses: actions/checkout@v3
    - name: Restore rust cache
      uses: actions/cache@v2
      with:
        key: rust-${{ matrix.target }}-${{ hashFiles('Cargo.lock') }}
        restore-keys: |
          rust-${{ matrix.target }}-
        path: |
          ~/.cargo
          target
    - name: Restore Scala caches
      uses: actions/cache@v2
      with:
        key: scala-${{ hashFiles('java/tests/*.sbt') }}
        restore-keys: |
          scala-
        path: |
          /tmp/.cache/coursier
          ~/.sbt
    - name: Clean up rust cache
      # The Scala code needs to find the Java code generated by the Rust build. When we restore the Rust cache, we might
      # end up with two directories of generated code, and the tests will fail. So we clean that up now and force code
      # generation to always happen.
      run: rm -rf target/debug/build/ironoxide-java-*
    - uses: olafurpg/setup-scala@v10
      with:
        java-version: 11
    - name: Install llvm (ubuntu)
      if: startsWith(matrix.target, 'ubuntu')
      run: sudo apt-get update && sudo apt-get install -y llvm
    # Not installing llvm for Mac because https://stackoverflow.com/a/35753922/107357
    - uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        components: rustfmt
    - name: Cargo fmt and build
      run: cargo fmt -- --check && cargo build -p ironoxide-java
    - name: Scala tests
      run: sbt test
      working-directory: java/tests
    - name: Clean the cargo cache
      run: |
        cargo install --no-default-features --features ci-autoclean cargo-cache
        cargo-cache
    - name: Clean the scala cache
      # https://www.scala-sbt.org/1.x/docs/Travis-CI-with-sbt.html#Caching
      run: find ${HOME}/.sbt -name '*.lock' -print -delete

  android-build:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        arch: [i686-linux-android, x86_64-linux-android, aarch64-linux-android]
        # These folder names will be used as the names of artifacts uploaded by this job.
        # In order to delete these artifacts, the same names must go into the list in the `android-delete-artifacts` job.
        include:
        - arch: i686-linux-android
          folder-name: x86
        - arch: x86_64-linux-android
          folder-name: x86_64
        - arch: aarch64-linux-android
          folder-name: arm64-v8a
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Restore rust cache
      uses: actions/cache@v2
      with:
        key: rust-${{ matrix.arch }}-${{ hashFiles('**/Cargo.*') }}
        restore-keys: |
          rust-${{ matrix.arch }}-
        path: |
          ~/.cargo
          target
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
    - name: Build
      run: |
        cargo install cross
        cross build --target ${{ matrix.arch }} -p ironoxide-android
        cp -r target/${{ matrix.arch }}/debug/build/ironoxide-android*/out/java android/ironoxide-android/src/main/
        mkdir -p android/ironoxide-android/src/main/jniLibs/${{ matrix.folder-name }}/
        cp -r target/${{ matrix.arch }}/debug/libironoxide_android.so android/ironoxide-android/src/main/jniLibs/${{ matrix.folder-name }}/
    - name: Zip src/main
      run: |
        cd android/ironoxide-android/src/main
        zip -r android_build.zip *
      # Uploads the src/main as an artifact with the provided folder name as its name.
      # In order to delete this artifact, the same name must go into the list in the `android-delete-artifacts` job.
    - name: Upload src/main as artifact
      uses: actions/upload-artifact@v1
      with:
        name: ${{ matrix.folder-name }}
        path: android/ironoxide-android/src/main/android_build.zip

  # As the currently available emulators cannot use arm64-v8a architecture, we are currently only testing x86/x86_64.
  # This can be added in when either of the following happens:
  #   - reactivecircus/android-emulator-runner@v2 supports the arm64-v8a architecture for testing
  #   - api-level 30 is stabilized, as that allows x86_64 to run arm64-v8a
  android-test:
    needs: android-build
    # reactivecircus/android-emulator-runner@v2 only works on Mac.
    runs-on: macos-11
    strategy:
      fail-fast: false
      matrix:
        api-level: [24, 29]
        arch: [x86, x86_64]
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Download android build
      uses: actions/download-artifact@v1
      with:
        name: ${{ matrix.arch }}
    - name: Unzip Android build
      run: unzip -o ${{ matrix.arch }}/android_build.zip -d android/ironoxide-android/src/main
    - name: Run tests
      uses: reactivecircus/android-emulator-runner@v2
      with:
        working-directory: ./android
        arch: ${{ matrix.arch }}
        api-level: ${{ matrix.api-level }}
        script: ./gradlew connectedAndroidTest

  # This job cleans up the artifacts uploaded in `android-build` as they are not needed outside of the workflow.
  # It will run even if `android-test` fails, ensuring that the artifacts get deleted.
  # If deletion fails, the workflow is still able to succeed, and the artifacts will automatically expire after 90 days.
  android-delete-artifacts:
    needs: android-test
    if: always()
    runs-on: ubuntu-22.04
    steps:
    - name: Delete artifacts
      uses: geekyeggo/delete-artifact@v1
      with:
        # These are the names of the artifacts uploaded in `android-build` and should be kept in sync with them
        name: |
          x86
          x86_64
          arm64-v8a
        failOnError: false

  # This tests that gradle can build ironoxide-android so we can catch issues before release.
  android-release-test:
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v3
    - name: Install cross
      run: cargo install cross
    - name: Run build script
      run: ./build.sh
      working-directory: android
    # This will test that we're able to build the .aar file required for release.
    # In particular, it will catch if the NDK version we have specified is different than the one installed on the machine.
    - name: Run gradle build
      run: ./gradlew build
      working-directory: android

  cpp-build:
    strategy:
      matrix:
        os: [ubuntu-22.04, macos-11]
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Restore rust cache
      uses: actions/cache@v2
      with:
        key: rust-${{ matrix.os }}-${{ hashFiles('**/Cargo.*') }}
        restore-keys: |
          rust-${{ matrix.os }}-
        path: |
          ~/.cargo
          target
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
    - name: Get Cmake
      uses: lukka/get-cmake@latest
    - name: Build and test
      run: |
        cargo build --release -p ironoxide-cpp
        cd cpp/
        cmake .
        make
        ./cpp-tests
    - name: Setup iOS build
      if: startsWith(matrix.os, 'macos')
      run: |
        rustup target add x86_64-apple-ios aarch64-apple-ios
        cargo install cargo-lipo
    - name: Build for iOS
      if: startsWith(matrix.os, 'macos')
      run: cargo lipo --release -p ironoxide-cpp
